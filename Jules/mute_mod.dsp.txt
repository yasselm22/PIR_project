import("stdfaust.lib");

// Phasor personnalisé
phasor(freq) = freq/ma.SR : (+ : ma.frac) ~ _;

// === Définition principale avec modulation ===
rhythmic_gate = _ <: gate, gate
with {
    // Paramètres de base
    run = checkbox("run[style:knob]"); 
    bpm = hslider("bpm[style:knob]", 120, 60, 500, 0.1);
    volume = hslider("volume[style:knob]", 0.8, 0, 1, 0.01);
    prop = hslider("proportion[style:knob]", 0.5, 0, 1, 0.1);
    attack = 0.1;
    
    // Calcul des paramètres dérivés
    release = (1/bpm)*60 * prop;
    sustain = 1;
    
    // Générateur de clock
    clock = run & (phasor(bpm/60) < prop);
    
    // Enveloppe ASR
    env = clock;
    
    // Effet de gate
    gate(x) = x * env * volume;
};

// === Modulations LFO ===
bpm_lfo = (os.osc(0.05) * 170) + 230;

prop_lfo = os.osc(0.15) * 0.45 + 0.55; // oscillation entre 0.1 et 1


// === Processus final avec modulation ===
process = hgroup("Rhythmic Gate",
    ["bpm":bpm_lfo, 
     "proportion":prop_lfo -> rhythmic_gate]
);
